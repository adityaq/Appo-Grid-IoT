#include <SoftwareSerial.h> // Libary to read the Gps
#include <PubSubClient.h> // Libary to Publish the data to Mqtt
#include <ESP8266WiFi.h> // Libary to Connect to the Internet World(Important)
#include <TinyGPS.h> // Libary to process and records the Gps data
#include <Wire.h> // Libary to record the Accelerometer Sensor
  const char* ssid     = "Novaders"; // Your ssid
  const char* password = "Tricons@123"; // Your Password 
  const char* mqtt_server = "192.168.1.6"; // Your Raspberry Pi Ip
    WiFiClient espClient;
    PubSubClient client(espClient);
      SoftwareSerial Gps(4, 5); // Gps Pin for connection
      TinyGPS gps;
      void gpsdump(TinyGPS &gps);
      void printFloat(double f, int digits = 2);
        long accelX, accelY, accelZ;
        float gForceX, gForceY, gForceZ;
        long gyroX, gyroY, gyroZ;
        float rotX, rotY, rotZ;
void printFloat(double number, int digits){ // Gps data
  if (number < 0.0) {
     Serial.print('-');
     number = -number;}
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;  
  number += rounding;
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  Serial.print(int_part);
  if (digits > 0)
    Serial.print("."); 
  while (digits-- > 0) {
    remainder *= 10.0;
    int toPrint = int(remainder);
    Serial.print(toPrint);
    remainder -= toPrint;}}
void setupMPU(){ // Setup the Wire libary to read the data from Accelerometer sensor
  Wire.beginTransmission(0b1101000); //This is the I2C address of the MPU (b1101000/b1101001 for AC0 low/high datasheet sec. 9.2)
  Wire.write(0x6B); //Accessing the register 6B - Power Management (Sec. 4.28)
  Wire.write(0b00000000); //Setting SLEEP register to 0. (Required; see Note on p. 9)
  Wire.endTransmission();  
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x1B); //Accessing the register 1B - Gyroscope Configuration (Sec. 4.4) 
  Wire.write(0x00000000); //Setting the gyro to full scale +/- 250deg./s 
  Wire.endTransmission(); 
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x1C); //Accessing the register 1C - Acccelerometer Configuration (Sec. 4.5) 
  Wire.write(0b00000000); //Setting the accel to +/- 2g
  Wire.endTransmission(); }
void recordAccelRegisters() { // Recording Accel Data
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x3B); //Starting register for Accel Readings
  Wire.endTransmission();
  Wire.requestFrom(0b1101000,6); //Request Accel Registers (3B - 40)
  while(Wire.available() < 6);
  accelX = Wire.read()<<8|Wire.read(); //Store first two bytes into accelX
  accelY = Wire.read()<<8|Wire.read(); //Store middle two bytes into accelY
  accelZ = Wire.read()<<8|Wire.read(); //Store last two bytes into accelZ
  processAccelData();}
void processAccelData(){ // Process Accel Data for Velocity
  gForceX = accelX / 16384.0*10;
  gForceY = accelY / 16384.0*10; 
  gForceZ = accelZ / 16384.0*10;}
void recordGyroRegisters() { // Recording Gypo Data
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x43); //Starting register for Gyro Readings
  Wire.endTransmission();
  Wire.requestFrom(0b1101000,6); //Request Gyro Registers (43 - 48)
  while(Wire.available() < 6);
  gyroX = Wire.read()<<8|Wire.read(); //Store first two bytes into accelX
  gyroY = Wire.read()<<8|Wire.read(); //Store middle two bytes into accelY
  gyroZ = Wire.read()<<8|Wire.read(); //Store last two bytes into accelZ
  processGyroData();}
void processGyroData() { // Processing Gyro Data
  rotX = gyroX / 131.0;
  rotY = gyroY / 131.0; 
  rotZ = gyroZ / 131.0;}
void setup_wifi() { // Connecting to Wifi 
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");}
  Serial.println("");
  Serial.println("WiFi connected");}
void reconnect() { // Connecting to Mqtt (Raspberry Pi)
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
      if (client.connect("esp8266")) {
      Serial.println("connected");
      }else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);}}}
void setup() { // Setup the things for All
  Serial.begin(115200);
  Gps.begin(9600);
  Wire.begin(D7, D6); // Sda and then Scl
  setupMPU();
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  pinMode(A0,INPUT);}
void loop() { // Infinite loop for All
  bool newdata = false;
  unsigned long start = millis();
  while (millis() - start < 5000) {
    if (Gps.available()) {
      char c = Gps.read();
      if (gps.encode(c)) {
        newdata = true;
        break;}}}
  long lat, lon;
  float flat, flon;
  unsigned long age, date, time, chars;
  int year;
  byte month, day, hour, minute, second, hundredths;
  unsigned short sentences, failed;
 recordAccelRegisters();
 recordGyroRegisters();
 if (newdata == true){
 gps.get_position(&lat, &lon, &age);
 gps.f_get_position(&flat, &flon, &age);
 gps.get_datetime(&date, &time, &age);
 gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, &hundredths, &age);
 gps.stats(&chars, &sentences, &failed);
 String Json = "{";
  Json += "\"DB\":";
  Json += (analogRead(A0))-28.35;
  Json += ",";
  Json += "\"Ip\":";
  Json += "\"84:F3:EB:94:9E:73\"";
  Json += ",";
  Json += "\"X\":";
  Json += rotX; 
  Json += ",";
  Json += "\"Y\":";
  Json += rotY; 
  Json += ",";
  Json += "\"Z\":";
  Json += rotZ;
  Json += ",";
  Json += "\"Lat\":";
  Json += lat;
  Json += ",";
  Json += "\"Lon\":";
  Json += lon;
  Json += "}";
  if (!client.connected()) {
    reconnect(   );}
  client.loop();
  char attributes[100];
  Json.toCharArray( attributes, 100 );
  client.publish( "test", attributes );
  Serial.print("Json = ");
  Serial.println( attributes );
  delay(300);}}
